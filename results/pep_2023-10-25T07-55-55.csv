number,name,status
1,PEP Purpose and Guidelines,
8,Style Guide for Python Code,
13,Python Language Governance,
11,CPython platform support,
20,The Zen of Python,
9,Sample Plaintext PEP Template,
10,Voting Guidelines,
42,Feature Requests,
12,Sample reStructuredText PEP Template,
7,Style Guide for C Code,
6,Bug Fix Releases,
4,Deprecation of Standard Modules,
5,Guidelines for Language Evolution,
213,Attribute Access Handlers,
3,Guidelines for Handling Bug Reports,
472,Support for indexing with keyword arguments,
2,Procedure for Adding New Modules,
517,A build-system independent format for source trees,
623,Remove wstr from Unicode,
626,Precise line numbers for debugging and other tools.,
625,Filename of a Source Distribution,
624,Remove Py_UNICODE encoder APIs,
622,Structural Pattern Matching,
621,Storing project metadata in pyproject.toml,
647,User-Defined Type Guards,
657,Include Fine Grained Error Locations in Tracebacks,
669,Low Impact Monitoring for CPython,
668,Marking Python base environments as “externally managed”,
667,Consistent views of namespaces,
666,Reject Foolish Indentation,
665,A file format to list Python dependencies for reproducibility of an application,
684,A Per-Interpreter GIL,
683,"Immortal Objects, Using a Fixed Refcount",
727,Documentation in Annotated Metadata,
3105,Make print a function,
3104,Access to Names in Outer Scopes,
3115,Metaclasses in Python 3000,
3114,Renaming iterator.next() to iterator.__next__(),
3112,Bytes literals in Python 3000,
3113,Removal of Tuple Parameter Unpacking,
3124,"Overloading, Generic Functions, Interfaces, and Adaptation",
3123,Making PyObject_HEAD conform to standard C,
3154,Pickle protocol version 4,
3153,Asynchronous IO support,
8000,Python Language Governance Proposal Overview,
8105,2024 Term Steering Council election,
8104,2023 Term Steering Council election,
8001,Python Governance Voting Process,
3156,Asynchronous IO Support Rebooted: the “asyncio” Module,
3333,Python Web Server Gateway Interface v1.0.1,
8103,2022 Term Steering Council election,
8102,2021 Term Steering Council election,
8101,2020 Term Steering Council election,
8100,January 2019 Steering Council election,
8016,The Steering Council Model,
8015,Organization of the Python community,
8012,The Community Governance Model,
8014,The Commons Governance Model,
8013,The External Council Governance Model,
8011,Python Governance Model Lead by Trio of Pythonistas,
3152,Cofunctions,
8010,The Technical Leader Governance Model,
3155,Qualified name for classes and functions,
3151,Reworking the OS and IO exception hierarchy,
3150,Statement local namespaces (aka “given” clause),
3149,ABI version tagged .so files,
8002,Open Source Governance Survey,
3148,futures - execute computations asynchronously,
3147,PYC Repository Directories,
3146,Merging Unladen Swallow into CPython,
3144,IP Address Manipulation Library for the Python Standard Library,
3143,Standard daemon process library,
3141,A Type Hierarchy for Numbers,
3145,Asynchronous I/O For subprocess.Popen,
3142,Add a “while” clause to generator expressions,
3140,"str(container) should call str(item), not repr(item)",
3139,Cleaning out sys and the “interpreter” module,
3134,Exception Chaining and Embedded Tracebacks,
3138,String representation in Python 3000,
3137,Immutable Bytes and Mutable Buffer,
3136,Labeled break and continue,
3135,New Super,
3133,Introducing Roles,
3131,Supporting Non-ASCII Identifiers,
3129,Class Decorators,
3128,BList: A Faster List-like Type,
3127,Integer Literal Support and Syntax,
3126,Remove Implicit String Concatenation,
3125,Remove Backslash Continuation,
3130,Access to Current Module/Class/Function,
3132,Extended Iterable Unpacking,
3111,Simple input built-in in Python 3000,
3122,Delineation of the main module,
3121,Extension Module Initialization and Finalization,
3120,Using UTF-8 as the default source encoding,
3119,Introducing Abstract Base Classes,
3118,Revising the buffer protocol,
3117,Postfix type declarations,
3116,New I/O,
3107,Function Annotations,
3109,Raising Exceptions in Python 3000,
3106,"Revamping dict.keys(), .values() and .items()",
3103,A Switch/Case Statement,
3102,Keyword-Only Arguments,
3110,Catching Exceptions in Python 3000,
3108,Standard Library Reorganization,
3101,Advanced String Formatting,
3000,Python 3000,
801,Reserved,
3003,Python Language Moratorium,
3002,Procedure for Backwards-Incompatible Changes,
3001,Procedure for reviewing and improving standard library modules,
754,IEEE 754 Floating Point Special Values,
3100,Miscellaneous Python 3.0 Plans,
3099,Things that will Not Change in Python 3000,
732,The Python Documentation Editorial Board,
730,Adding iOS as a supported platform,
729,Typing governance process,
726,Module ,
725,Specifying external dependencies in pyproject.toml,
724,Stricter Type Guards,
723,Embedding pyproject.toml in single-file scripts,
731,C API Working Group Charter,
722,Dependency specification for single-file scripts,
721,Using tarfile.data_filter for source distribution extraction,
715,Disabling bdist_egg distribution uploads on PyPI,
714,Rename dist-info-metadata in the Simple API,
720,Cross-compiling Python packages,
719,Python 3.13 Release Schedule,
718,Subscriptable functions,
713,Callable Modules,
712,Adding a “converter” parameter to dataclasses.field,
711,PyBI: a standard format for distributing Python Binaries,
710,Recording the provenance of installed packages,
709,Inlined comprehensions,
706,Filter for tarfile.extractall,
705,TypedDict: Read-only items,
708,Extending the Repository API to Mitigate Dependency Confusion Attacks,
707,A simplified signature for __exit__ and __aexit__,
704,Require virtual environments by default for package installers,
702,Marking deprecations using the type system,
703,Making the Global Interpreter Lock Optional in CPython,
701,Syntactic formalization of f-strings,
698,Override Decorator for Static Typing,
697,Limited C API for Extending Opaque Types,
700,Additional Fields for the Simple API for Package Indexes,
699,Remove private dict version field added in PEP 509,
696,Type defaults for TypeVarLikes,
695,Type Parameter Syntax,
694,Upload 2.0 API for Python Package Repositories,
693,Python 3.12 Release Schedule,
692,Using TypedDict for more precise **kwargs typing,
691,JSON-based Simple API for Python Package Indexes,
687,Isolating modules in the standard library,
690,Lazy Imports,
688,Making the buffer protocol accessible in Python,
686,Make UTF-8 mode default,
689,Unstable C API tier,
682,Format Specifier for Signed Zero,
685,Comparison of extra names for optional distribution dependencies,
681,Data Class Transforms,
679,Allow parentheses in assert statements,
678,Enriching Exceptions with Notes,
680,tomllib: Support for Parsing TOML in the Standard Library,
676,PEP Infrastructure Process,
677,Callable Type Syntax,
664,Python 3.11 Release Schedule,
670,Convert macros to functions in the Python C API,
674,Disallow using macros as l-values,
663,"Standardizing Enum str(), repr(), and format() behaviors",
675,Arbitrary Literal String Type,
673,Self Type,
672,Unicode-related Security Considerations for Python,
671,Syntax for late-bound function argument defaults,
660,Editable installs for pyproject.toml based builds (wheel based),
662,Editable installs via virtual wheels,
661,Sentinel Values,
659,Specializing Adaptive Interpreter,
658,Serve Distribution Metadata in the Simple Repository API,
654,Exception Groups and except*,
656,Platform Tag for Linux Distributions Using Musl,
655,Marking individual TypedDict items as required or potentially-missing,
652,Maintaining the Stable ABI,
651,Robust Stack Overflow Handling,
653,Precise Semantics for Pattern Matching,
650,Specifying Installer Requirements for Python Projects,
648,Extensible customizations of the interpreter at startup,
645,Allow writing optional types as ,
649,Deferred Evaluation Of Annotations Using Descriptors,
646,Variadic Generics,
644,Require OpenSSL 1.1.1 or newer,
643,Metadata for Package Source Distributions,
642,Explicit Pattern Syntax for Structural Pattern Matching,
641,Using an underscore in the version portion of Python 3.10 compatibility tags,
640,Unused variable syntax,
638,Syntactic Macros,
639,Improving License Clarity with Better Package Metadata,
637,Support for indexing with keyword arguments,
636,Structural Pattern Matching: Tutorial,
635,Structural Pattern Matching: Motivation and Rationale,
634,Structural Pattern Matching: Specification,
633,Dependency specification in pyproject.toml using an exploded TOML table,
631,Dependency specification in pyproject.toml based on PEP 508,
632,Deprecate distutils module,
630,Isolating Extension Modules,
629,Versioning PyPI’s Simple API,
620,Hide implementation details from the C API,
619,Python 3.10 Release Schedule,
617,New PEG parser for CPython,
615,Support for the IANA Time Zone Database in the Standard Library,
628,Add ,
627,Recording installed projects,
618,Add Optional Length-Checking To zip,
616,String methods to remove prefixes and suffixes,
610,Recording the Direct URL Origin of installed distributions,
609,Python Packaging Authority (PyPA) Governance,
613,Explicit Type Aliases,
612,Parameter Specification Variables,
607,Reducing CPython’s Feature Delivery Latency,
611,The one million limit,
614,Relaxing Grammar Restrictions On Decorators,
608,Coordinated Python release,
603,Adding a frozenmap type to collections,
601,Forbid return/break/continue breaking out of finally,
606,Python Compatibility Version,
605,A rolling feature release stream for CPython,
604,Allow writing union types as ,
600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
599,The manylinux2014 Platform Tag,
602,Annual Release Cycle for Python,
596,Python 3.9 Release Schedule,
595,Improving bugs.python.org,
594,Removing dead batteries from the standard library,
593,Flexible function and variable annotations,
592,Adding “Yank” Support to the Simple API,
598,Introducing incremental feature releases,
591,Adding a final qualifier to typing,
597,Add optional EncodingWarning,
590,Vectorcall: a fast calling protocol for CPython,
589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
588,GitHub Issues Migration Plan,
587,Python Initialization Configuration,
586,Literal Types,
585,Type Hinting Generics In Standard Collections,
584,Add Union Operators To dict,
583,A Concurrency Memory Model for Python,
581,Using GitHub Issues for CPython,
579,Refactoring C functions and methods,
575,Unifying function/method classes,
576,Rationalize Built-in function classes,
580,The C call protocol,
578,Python Runtime Audit Hooks,
577,Augmented Assignment Expressions,
582,Python local packages directory,
567,Context Variables,
574,Pickle protocol 5 with out-of-band data,
570,Python Positional-Only Parameters,
573,Module State Access from C Extension Methods,
569,Python 3.8 Release Schedule,
568,Generator-sensitivity for Context Variables,
572,Assignment Expressions,
571,The manylinux2010 Platform Tag,
565,Show DeprecationWarning in __main__,
564,Add new time functions with nanosecond resolution,
563,Postponed Evaluation of Annotations,
566,Metadata for Python Software Packages 2.1,
562,Module __getattr__ and __dir__,
561,Distributing and Packaging Type Information,
560,Core support for typing module and generic types,
559,Built-in noop(),
557,Data Classes,
555,Context-local variables (contextvars),
558,Defined semantics for locals(),
556,Threaded garbage collection,
552,Deterministic pycs,
551,Security transparency in the Python runtime,
554,Multiple Interpreters in the Stdlib,
553,Built-in breakpoint(),
549,Instance Descriptors,
547,Running extension modules using the -m option,
550,Execution Context,
543,A Unified TLS API for Python,
546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
545,Python Documentation Translations,
548,More Flexible Loop Control,
544,Protocols: Structural subtyping (static duck typing),
536,Final Grammar for Literal String Interpolation,
540,Add a new UTF-8 Mode,
535,Rich comparison chaining,
538,Coercing the legacy C locale to a UTF-8 based locale,
537,Python 3.7 Release Schedule,
542,Dot Notation Assignment In Function Header,
541,Package Index Name Retention,
539,A New C-API for Thread-Local Storage in CPython,
534,Improved Errors for Missing Standard Library Modules,
529,Change Windows filesystem encoding to UTF-8,
528,Change Windows console encoding to UTF-8,
533,Deterministic cleanup for iterators,
532,A circuit breaking protocol and binary operators,
527,Removing Un(der)used file types/extensions on PyPI,
531,Existence checking operators,
530,Asynchronous Comprehensions,
526,Syntax for Variable Annotations,
523,Adding a frame evaluation API to CPython,
520,Preserving Class Attribute Definition Order,
519,Adding a file system path protocol,
525,Asynchronous Generators,
524,Make os.urandom() blocking on Linux,
522,Allow BlockingIOError in security sensitive APIs,
521,Managing global context via ‘with’ blocks in generators and coroutines,
518,Specifying Minimum Build System Requirements for Python Projects,
516,Build system abstraction for pip/conda etc,
510,Specialize functions with guards,
511,API for code transformers,
515,Underscores in Numeric Literals,
513,A Platform Tag for Portable Linux Built Distributions,
512,Migrating from hg.python.org to GitHub,
514,Python registration in the Windows registry,
509,Add a private version to dict,
504,Using the System RNG by default,
503,Simple Repository API,
508,Dependency specification for Python Software Packages,
507,Migrate CPython to Git and GitLab,
506,Adding A Secrets Module To The Standard Library,
505,None-aware operators,
502,String Interpolation - Extended Discussion,
499,,
500,A protocol for delegating datetime methods to their tzinfo implementations,
498,Literal String Interpolation,
497,A standard mechanism for backward compatibility,
496,Environment Markers,
494,Python 3.6 Release Schedule,
501,General purpose string interpolation,
495,Local Time Disambiguation,
493,HTTPS verification migration tools for Python 2.7,
487,Simpler customisation of class creation,
492,Coroutines with async and await syntax,
491,The Wheel Binary Package Format 1.9,
490,Chain exceptions at C level,
489,Multi-phase extension module initialization,
486,Make the Python Launcher aware of virtual environments,
488,Elimination of PYO files,
484,Type Hints,
485,A Function for testing approximate equality,
479,Change StopIteration handling inside generators,
481,"Migrate CPython to Git, Github, and Phabricator",
480,Surviving a Compromise of PyPI: End-to-end signing of packages,
478,Python 3.5 Release Schedule,
477,Backport ensurepip (PEP 453) to Python 2.7,
483,The Theory of Type Hints,
482,Literature Overview for Type Hints,
475,Retry system calls failing with EINTR,
476,Enabling certificate verification by default for stdlib http clients,
473,Adding structured data to built-in exceptions,
471,os.scandir() function – a better and faster directory iterator,
468,Preserving the order of **kwargs in a function.,
474,Creating forge.python.org,
469,Migration of dict iteration code to Python 3,
470,Removing External Hosting Support on PyPI,
467,Minor API improvements for binary sequences,
466,Network Security Enhancements for Python 2.7.x,
463,Exception-catching expressions,
464,Removal of the PyPI Mirror Authenticity API,
461,Adding % formatting to bytes and bytearray,
462,Core development workflow automation for CPython,
465,A dedicated infix operator for matrix multiplication,
460,Add binary interpolation and formatting,
459,Standard Metadata Extensions for Python Software Packages,
458,Secure PyPI downloads with signed repository metadata,
457,Notation For Positional-Only Parameters,
456,Secure and interchangeable hash algorithm,
455,Adding a key-transforming dictionary to collections,
454,Add a new tracemalloc module to trace Python memory allocations,
452,API for Cryptographic Hash Functions v2.0,
451,A ModuleSpec Type for the Import System,
453,Explicit bootstrapping of pip in Python installations,
450,Adding A Statistics Module To The Standard Library,
447,Add __getdescriptor__ method to metaclass,
445,Add new APIs to customize Python memory allocators,
449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
446,Make newly created file descriptors non-inheritable,
443,Single-dispatch generic functions,
444,Python Web3 Interface,
448,Additional Unpacking Generalizations,
442,Safe object finalization,
441,Improving Python ZIP Application Support,
439,Inclusion of implicit pip bootstrap in Python installation,
440,Version Identification and Dependency Specification,
437,"A DSL for specifying signatures, annotations and argument converters",
438,Transitioning to release-file hosting on PyPI,
436,The Argument Clinic DSL,
435,Adding an Enum type to the Python standard library,
434,IDLE Enhancement Exception for All Branches,
427,The Wheel Binary Package Format 1.0,
431,Time zone support improvements,
429,Python 3.4 Release Schedule,
433,Easier suppression of file descriptor inheritance,
430,Migrating to Python 3 as the default online documentation,
428,The pathlib module – object-oriented filesystem paths,
432,Restructuring the CPython startup sequence,
426,Metadata for Python Software Packages 2.0,
422,Simpler customisation of class creation,
419,Protecting cleanup statements from interruptions,
424,A method for exposing a length hint,
421,Adding sys.implementation,
423,Naming conventions and recipes related to packaging,
420,Implicit Namespace Packages,
425,Compatibility Tags for Built Distributions,
417,Including mock in the Standard Library,
416,Add a frozendict builtin type,
418,"Add monotonic time, performance counter, and process time functions",
415,Implement context suppression with exception attributes,
414,Explicit Unicode Literal for Python 3.3,
413,Faster evolution of the Python Standard Library,
412,Key-Sharing Dictionary,
411,Provisional packages in the Python standard library,
410,Use decimal.Decimal type for timestamps,
406,Improved Encapsulation of Import State,
405,Python Virtual Environments,
403,General purpose decorator clause (aka “@in” clause),
409,Suppressing exception context,
408,Standard library __preview__ package,
407,New release cycle and introducing long-term support versions,
404,Python 2.8 Un-release Schedule,
402,Simplified Package Layout and Partitioning,
400,Deprecate codecs.StreamReader and codecs.StreamWriter,
398,Python 3.3 Release Schedule,
397,Python launcher for Windows,
395,Qualified Names for Modules,
399,Pure Python/C Accelerator Module Compatibility Requirements,
396,Module Version Numbers,
401,BDFL Retirement,
394,The “python” Command on Unix-Like Systems,
393,Flexible String Representation,
392,Python 3.2 Release Schedule,
391,Dictionary-Based Configuration For Logging,
387,Backwards Compatibility Policy,
386,Changing the version comparison module in Distutils,
390,Static metadata for Distutils,
389,argparse - New Command Line Parsing Module,
385,Migrating from Subversion to Mercurial,
384,Defining a Stable ABI,
379,Adding an Assignment Expression,
381,Mirroring infrastructure for PyPI,
378,Format Specifier for Thousands Separator,
382,Namespace Packages,
380,Syntax for Delegating to a Subgenerator,
383,Non-decodable Bytes in System Character Interfaces,
377,Allow __enter__() methods to skip the statement body,
370,Per user site-packages directory,
374,Choosing a distributed VCS for the Python project,
371,Addition of the multiprocessing package to the standard library,
376,Database of Installed Python Distributions,
375,Python 3.1 Release Schedule,
373,Python 2.7 Release Schedule,
372,Adding an ordered dictionary to collections,
369,Post import hooks,
368,Standard image protocol and class,
367,New Super,
365,Adding the pkg_resources module,
366,Main module explicit relative imports,
364,Transitioning to the Py3K Standard Library,
363,Syntax For Dynamic Attribute Access,
362,Function Signature Object,
361,Python 2.6 and 3.0 Release Schedule,
359,The “make” Statement,
356,Python 2.5 Release Schedule,
360,Externally Maintained Packages,
358,The “bytes” Object,
357,Allowing Any Object to be Used for Slicing,
354,Enumerations in Python,
353,Using ssize_t as the index type,
355,Path - Object oriented filesystem paths,
347,Migrating the Python CVS to Subversion,
350,Codetags,
352,Required Superclass for Exceptions,
349,Allow str() to return unicode strings,
351,The freeze protocol,
345,Metadata for Python Software Packages 1.2,
346,User Defined (”,
348,Exception Reorganization for Python 3.0,
337,Logging Usage in the Standard Library,
338,Executing modules as scripts,
341,Unifying try-except and try-finally,
340,Anonymous Block Statements,
339,Design of the CPython Compiler,
344,Exception Chaining and Embedded Tracebacks,
343,The “with” Statement,
342,Coroutines via Enhanced Generators,
335,Overloadable Boolean Operators,
336,Make None Callable,
332,Byte vectors and String/Unicode Unification,
331,Locale-Independent Float/String Conversions,
330,Python Bytecode Verification,
334,Simple Coroutines via SuspendIteration,
329,Treating Builtins as Constants in the Standard Library,
333,Python Web Server Gateway Interface v1.0,
325,Resource-Release Support for Generators,
328,Imports: Multi-Line and Absolute/Relative,
327,Decimal Data Type,
326,A Case for Top and Bottom Values,
324,subprocess - New process module,
323,Copyable Iterators,
322,Reverse Iteration,
321,Date/Time Parsing and Formatting,
318,Decorators for Functions and Methods,
315,Enhanced While Loop,
313,Adding Roman Numeral Literals to Python,
320,Python 2.4 Release Schedule,
319,Python Synchronize/Asynchronize Block,
317,Eliminate Implicit Exception Instantiation,
314,Metadata for Python Software Packages 1.1,
316,Programming by Contract for Python,
312,Simple Implicit Lambda,
309,Partial Function Application,
308,Conditional Expressions,
311,Simplified Global Interpreter Lock Acquisition for Extensions,
310,Reliable Acquisition/Release Pairs,
307,Extensions to the pickle protocol,
305,CSV File API,
306,How to Change Python’s Grammar,
303,Extend divmod() for Multiple Divisors,
304,Controlling Generation of Bytecode Files,
297,Support for System Upgrades,
302,New Import Hooks,
301,Package Index and Metadata for Distutils,Either “success” or “fail”.
299,Special __main__() function in modules,
298,The Locked Buffer Interface,
296,Adding a bytes Object Type,
291,Backward Compatibility for the Python 2 Standard Library,
288,Generators Attributes and Exceptions,
289,Generator Expressions,
295,Interpretation of multiline string constants,
293,Codec Error Handling Callbacks,
292,Simpler String Substitutions,
290,Code Migration and Modernization,
294,Type Names in the types Module,
283,Python 2.3 Release Schedule,
282,A Logging System,
287,reStructuredText Docstring Format,
286,Enhanced Argument Tuples,
280,Optimizing access to globals,
285,Adding a bool type,
284,Integer for-loops,
281,Loop Counter Iteration with range and xrange,
277,Unicode file name support for Windows NT,
274,Dict Comprehensions,
279,The enumerate() built-in function,
278,Universal Newline Support,
276,Simple Iterator for ints,
275,Switching on Multiple Values,
273,Import Modules from Zip Archives,
272,API for Block Encryption Algorithms v1.0,
270,uniq method for list objects,
271,Prefixing sys.path by command line option,
269,Pgen Module for Python,
268,Extended HTTP functionality and WebDAV,
265,Sorting Dictionaries by Value,
264,Future statements in simulated shells,
267,Optimized Access to Module Namespaces,
266,Optimizing Global Variable/Attribute Access,
263,Defining Python Source Code Encodings,
261,Support for “wide” Unicode characters,
260,Simplify xrange(),
262,A Database of Installed Python Packages,
259,Omit printing newline after newline,
256,Docstring Processing System Framework,
258,Docutils Design Specification,
255,Simple Generators,
257,Docstring Conventions,
254,Making Classes Look More Like Types,
253,Subtyping Built-in Types,
252,Making Types Look More Like Classes,
250,Using site-packages on Windows,
249,Python Database API Specification v2.0,
248,Python Database API Specification v1.0,
251,Python 2.2 Release Schedule,
247,API for Cryptographic Hash Functions,
241,Metadata for Python Software Packages,
244,The ,
242,Numeric Kinds,
240,Adding a Rational Literal to Python,
246,Object Adaptation,
245,Python Interface Syntax,
239,Adding a Rational Type to Python,
243,Module Repository Upload Mechanism,
238,Changing the Division Operator,
236,Back to the __future__,
233,Python Online Help,
232,Function Attributes,
234,Iterators,
237,Unifying Long Integers and Integers,
231,__findattr__(),
235,Import on Case-Insensitive Platforms,
230,Warning Framework,
229,Using Distutils to Build Python,
223,Change the Meaning of ,
226,Python 2.1 Release Schedule,
228,Reworking Python’s Numeric Model,
225,Elementwise/Objectwise Operators,
227,Statically Nested Scopes,
224,Attribute Docstrings,
222,Web Library Enhancements,
220,"Coroutines, Generators, Continuations",
218,Adding a Built-In Set Object Type,
219,Stackless Python,
217,Display Hook for Interactive Use,
215,String Interpolation,
216,Docstring Format,
221,Import As,
214,Extended Print Statement,
212,Loop Counter Iteration,
211,Adding A New Outer Product Operator,
210,Decoupling the Interpreter Loop,
209,Multi-dimensional Arrays,
207,Rich Comparisons,
208,Reworking the Coercion Model,
206,Python Advanced Library,
205,Weak References,
160,Python 1.6 Release Schedule,
203,Augmented Assignments,
204,Range Literals,
202,List Comprehensions,
201,Lockstep Iteration,
200,Python 2.0 Release Schedule,
103,Collecting information about git,
102,Doing Python Micro Releases,
100,Python Unicode Integration,
101,Doing Python Releases 101,
